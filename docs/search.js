window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "CARLA", "modulename": "CARLA", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "CARLA.env", "modulename": "CARLA.env", "kind": "module", "doc": "<h2 id=\"env\">env/</h2>\n\n<p>CARLA environment module for reinforcement learning.\nContains the main World class and supporting sensors.</p>\n"}, {"fullname": "CARLA.env.sensors", "modulename": "CARLA.env.sensors", "kind": "module", "doc": "<h2 id=\"sensorspy\">sensors.py</h2>\n\n<p>CARLA sensor classes used by the World environment. Includes collision detection,\nIMU measurements, and RGB/LiDAR data streaming and sector-based processing.</p>\n\n<p>Classes:\n    - CollisionSensor: Handles vehicle collision events and history.\n    - IMUSensor: Reads accelerometer, gyroscope, and compass values.\n    - CameraManager: Manages RGB and LiDAR sensors, and processes LiDAR data.</p>\n"}, {"fullname": "CARLA.env.sensors.get_actor_display_name", "modulename": "CARLA.env.sensors", "qualname": "get_actor_display_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">actor</span>, </span><span class=\"param\"><span class=\"n\">truncate</span><span class=\"o\">=</span><span class=\"mi\">250</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.env.sensors.CollisionSensor", "modulename": "CARLA.env.sensors", "qualname": "CollisionSensor", "kind": "class", "doc": "<p>A CARLA sensor that detects and stores collision events for the attached actor.</p>\n"}, {"fullname": "CARLA.env.sensors.CollisionSensor.__init__", "modulename": "CARLA.env.sensors", "qualname": "CollisionSensor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent_actor</span></span>)</span>"}, {"fullname": "CARLA.env.sensors.CollisionSensor.sensor", "modulename": "CARLA.env.sensors", "qualname": "CollisionSensor.sensor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CollisionSensor.history", "modulename": "CARLA.env.sensors", "qualname": "CollisionSensor.history", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CollisionSensor.get_collision_history", "modulename": "CARLA.env.sensors", "qualname": "CollisionSensor.get_collision_history", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.env.sensors.CollisionSensor.has_collided", "modulename": "CARLA.env.sensors", "qualname": "CollisionSensor.has_collided", "kind": "function", "doc": "<p>Check if a collision has occurred based on the history.</p>\n\n<p>Returns:\n    True if there is at least one collision in the history, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.env.sensors.IMUSensor", "modulename": "CARLA.env.sensors", "qualname": "IMUSensor", "kind": "class", "doc": "<p>A CARLA sensor that captures IMU (Inertial Measurement Unit) data:\naccelerometer, gyroscope, and compass.</p>\n"}, {"fullname": "CARLA.env.sensors.IMUSensor.__init__", "modulename": "CARLA.env.sensors", "qualname": "IMUSensor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent_actor</span></span>)</span>"}, {"fullname": "CARLA.env.sensors.IMUSensor.sensor", "modulename": "CARLA.env.sensors", "qualname": "IMUSensor.sensor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.IMUSensor.accelerometer", "modulename": "CARLA.env.sensors", "qualname": "IMUSensor.accelerometer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.IMUSensor.gyroscope", "modulename": "CARLA.env.sensors", "qualname": "IMUSensor.gyroscope", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.IMUSensor.compass", "modulename": "CARLA.env.sensors", "qualname": "IMUSensor.compass", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.IMUSensor.latest_imu", "modulename": "CARLA.env.sensors", "qualname": "IMUSensor.latest_imu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.IMUSensor.last_time", "modulename": "CARLA.env.sensors", "qualname": "IMUSensor.last_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.IMUSensor.get_imu_latest", "modulename": "CARLA.env.sensors", "qualname": "IMUSensor.get_imu_latest", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.env.sensors.CameraManager", "modulename": "CARLA.env.sensors", "qualname": "CameraManager", "kind": "class", "doc": "<p>Handles RGB camera and LiDAR sensors in CARLA for a given vehicle.\nIncludes setup, transformation, threading, and sector-based LiDAR processing.</p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.__init__", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent_actor</span>, </span><span class=\"param\"><span class=\"n\">gamma_correction</span>, </span><span class=\"param\"><span class=\"n\">world</span></span>)</span>"}, {"fullname": "CARLA.env.sensors.CameraManager.camerasensor", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.camerasensor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.device", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.device", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.world", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.world", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.lidarsensor", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.lidarsensor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.surface", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.surface", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.timer", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.timer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.tracks", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.tracks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.next_id", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.next_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.recording", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.recording", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.transform_index", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.transform_index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.sensors", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.sensors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.index", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.tracked_position", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.tracked_position", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.lost_count", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.lost_count", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.distance_threshold", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.distance_threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.angle_threshold", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.angle_threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.tracking_threshold", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.tracking_threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.tracked_object", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.tracked_object", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.x_threshold", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.x_threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.y_threshold", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.y_threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.initialized", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.initialized", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.lidar_data", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.lidar_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.sector_distances", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.sector_distances", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.sensor_thread", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.sensor_thread", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.sensor_thread_event", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.sensor_thread_event", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.sensor_lock", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.sensor_lock", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.global_transformation", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.global_transformation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.prev_pcd", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.prev_pcd", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.latest_lidar", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.latest_lidar", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.prev_time", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.prev_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.initial_pos", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.initial_pos", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.position_now", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.position_now", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.sensors.CameraManager.set_sensor", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.set_sensor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span>, </span><span class=\"param\"><span class=\"n\">force_respawn</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.env.sensors.CameraManager.get_transformed_lidar_points", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.get_transformed_lidar_points", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lidar_data</span>, </span><span class=\"param\"><span class=\"n\">location</span>, </span><span class=\"param\"><span class=\"n\">rotation</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.env.sensors.CameraManager.compute_sector_distances", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.compute_sector_distances", "kind": "function", "doc": "<p>Divide the LIDAR readings into 8 sectors (each 45\u00b0):</p>\n\n<ul>\n<li>Sector 0: Front (-22.5\u00b0 to +22.5\u00b0)</li>\n<li>Sector 1: Front-Right (+22.5\u00b0 to +67.5\u00b0)</li>\n<li>Sector 2: Right (+67.5\u00b0 to +112.5\u00b0)</li>\n<li>Sector 3: Rear-Right (+112.5\u00b0 to +157.5\u00b0)</li>\n<li>Sector 4: Rear (+157.5\u00b0 to -157.5\u00b0)</li>\n<li>Sector 5: Rear-Left (-157.5\u00b0 to -112.5\u00b0)</li>\n<li>Sector 6: Left (-112.5\u00b0 to -67.5\u00b0)</li>\n<li>Sector 7: Front-Left (-67.5\u00b0 to -22.5\u00b0)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lidar_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.env.sensors.CameraManager.get_sector_distances", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.get_sector_distances", "kind": "function", "doc": "<p>Returns the latest sector distances computed from LiDAR.</p>\n\n<p>Returns:\n    np.ndarray: Array of 8 distances.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.env.sensors.CameraManager.get_lidar_points", "modulename": "CARLA.env.sensors", "qualname": "CameraManager.get_lidar_points", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.env.world_env", "modulename": "CARLA.env.world_env", "kind": "module", "doc": "<h2 id=\"world_envpy\">world_env.py</h2>\n\n<p>This module defines the CARLA environment wrapper used for reinforcement learning.\nIt includes logic for environment reset, reward computation, step processing, and data\nintegration from sensors like LiDAR, IMU, and camera.</p>\n\n<p>Main class:\n    CarlaEnv - environment wrapping the CARLA simulation.</p>\n"}, {"fullname": "CARLA.env.world_env.VIRIDIS", "modulename": "CARLA.env.world_env", "qualname": "VIRIDIS", "kind": "variable", "doc": "<p></p>\n", "default_value": "array([[   0.050383,    0.029803,     0.52797,           1],\n       [   0.063536,    0.028426,     0.53312,           1],\n       [   0.075353,    0.027206,     0.53801,           1],\n       ...,\n       [    0.94415,     0.96192,     0.14686,           1],\n       [     0.9419,     0.96859,     0.14096,           1],\n       [    0.94002,     0.97516,     0.13133,           1]])"}, {"fullname": "CARLA.env.world_env.VID_RANGE", "modulename": "CARLA.env.world_env", "qualname": "VID_RANGE", "kind": "variable", "doc": "<p></p>\n", "default_value": "array([          0,   0.0039216,   0.0078431,    0.011765,    0.015686,    0.019608,    0.023529,    0.027451,    0.031373,    0.035294,    0.039216,    0.043137,    0.047059,     0.05098,    0.054902,    0.058824,    0.062745,    0.066667,    0.070588,     0.07451,    0.078431,    0.082353,    0.086275,    0.090196,\n          0.094118,    0.098039,     0.10196,     0.10588,      0.1098,     0.11373,     0.11765,     0.12157,     0.12549,     0.12941,     0.13333,     0.13725,     0.14118,      0.1451,     0.14902,     0.15294,     0.15686,     0.16078,     0.16471,     0.16863,     0.17255,     0.17647,     0.18039,     0.18431,\n           0.18824,     0.19216,     0.19608,         0.2,     0.20392,     0.20784,     0.21176,     0.21569,     0.21961,     0.22353,     0.22745,     0.23137,     0.23529,     0.23922,     0.24314,     0.24706,     0.25098,      0.2549,     0.25882,     0.26275,     0.26667,     0.27059,     0.27451,     0.27843,\n           0.28235,     0.28627,      0.2902,     0.29412,     0.29804,     0.30196,     0.30588,      0.3098,     0.31373,     0.31765,     0.32157,     0.32549,     0.32941,     0.33333,     0.33725,     0.34118,      0.3451,     0.34902,     0.35294,     0.35686,     0.36078,     0.36471,     0.36863,     0.37255,\n           0.37647,     0.38039,     0.38431,     0.38824,     0.39216,     0.39608,         0.4,     0.40392,     0.40784,     0.41176,     0.41569,     0.41961,     0.42353,     0.42745,     0.43137,     0.43529,     0.43922,     0.44314,     0.44706,     0.45098,      0.4549,     0.45882,     0.46275,     0.46667,\n           0.47059,     0.47451,     0.47843,     0.48235,     0.48627,      0.4902,     0.49412,     0.49804,     0.50196,     0.50588,      0.5098,     0.51373,     0.51765,     0.52157,     0.52549,     0.52941,     0.53333,     0.53725,     0.54118,      0.5451,     0.54902,     0.55294,     0.55686,     0.56078,\n           0.56471,     0.56863,     0.57255,     0.57647,     0.58039,     0.58431,     0.58824,     0.59216,     0.59608,         0.6,     0.60392,     0.60784,     0.61176,     0.61569,     0.61961,     0.62353,     0.62745,     0.63137,     0.63529,     0.63922,     0.64314,     0.64706,     0.65098,      0.6549,\n           0.65882,     0.66275,     0.66667,     0.67059,     0.67451,     0.67843,     0.68235,     0.68627,      0.6902,     0.69412,     0.69804,     0.70196,     0.70588,      0.7098,     0.71373,     0.71765,     0.72157,     0.72549,     0.72941,     0.73333,     0.73725,     0.74118,      0.7451,     0.74902,\n           0.75294,     0.75686,     0.76078,     0.76471,     0.76863,     0.77255,     0.77647,     0.78039,     0.78431,     0.78824,     0.79216,     0.79608,         0.8,     0.80392,     0.80784,     0.81176,     0.81569,     0.81961,     0.82353,     0.82745,     0.83137,     0.83529,     0.83922,     0.84314,\n           0.84706,     0.85098,      0.8549,     0.85882,     0.86275,     0.86667,     0.87059,     0.87451,     0.87843,     0.88235,     0.88627,      0.8902,     0.89412,     0.89804,     0.90196,     0.90588,      0.9098,     0.91373,     0.91765,     0.92157,     0.92549,     0.92941,     0.93333,     0.93725,\n           0.94118,      0.9451,     0.94902,     0.95294,     0.95686,     0.96078,     0.96471,     0.96863,     0.97255,     0.97647,     0.98039,     0.98431,     0.98824,     0.99216,     0.99608,           1])"}, {"fullname": "CARLA.env.world_env.LABEL_COLORS", "modulename": "CARLA.env.world_env", "qualname": "LABEL_COLORS", "kind": "variable", "doc": "<p></p>\n", "default_value": "array([[1, 0, 0],\n       [0, 1, 0],\n       [0, 0, 1]])"}, {"fullname": "CARLA.env.world_env.device", "modulename": "CARLA.env.world_env", "qualname": "device", "kind": "variable", "doc": "<p></p>\n", "default_value": "device(type=&#x27;cuda&#x27;)"}, {"fullname": "CARLA.env.world_env.get_actor_display_name", "modulename": "CARLA.env.world_env", "qualname": "get_actor_display_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">actor</span>, </span><span class=\"param\"><span class=\"n\">truncate</span><span class=\"o\">=</span><span class=\"mi\">250</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.env.world_env.World", "modulename": "CARLA.env.world_env", "qualname": "World", "kind": "class", "doc": "<p>The main Gymnasium class for implementing Reinforcement Learning Agents environments.</p>\n\n<p>The class encapsulates an environment with arbitrary behind-the-scenes dynamics through the <code>step()</code> and <code>reset()</code> functions.\nAn environment can be partially or fully observed by single agents. For multi-agent environments, see PettingZoo.</p>\n\n<p>The main API methods that users of this class need to know are:</p>\n\n<ul>\n<li><code>step()</code> - Updates an environment with actions returning the next agent observation, the reward for taking that actions,\nif the environment has terminated or truncated due to the latest action and information from the environment about the step, i.e. metrics, debug info.</li>\n<li><code>reset()</code> - Resets the environment to an initial state, required before calling step.\nReturns the first agent observation for an episode and information, i.e. metrics, debug info.</li>\n<li><code>render()</code> - Renders the environments to help visualise what the agent see, examples modes are \"human\", \"rgb_array\", \"ansi\" for text.</li>\n<li><code>close()</code> - Closes the environment, important when external software is used, i.e. pygame for rendering, databases</li>\n</ul>\n\n<p>Environments have additional attributes for users to understand the implementation</p>\n\n<ul>\n<li><code>action_space</code> - The Space object corresponding to valid actions, all valid actions should be contained within the space.</li>\n<li><code>observation_space</code> - The Space object corresponding to valid observations, all valid observations should be contained within the space.</li>\n<li><code>spec</code> - An environment spec that contains the information used to initialize the environment from <code>gymnasium.make()</code></li>\n<li><code>metadata</code> - The metadata of the environment, e.g. <code>{\"render_modes\": [\"rgb_array\", \"human\"], \"render_fps\": 30}</code>. For Jax or Torch, this can be indicated to users with <code>\"jax\"=True</code> or <code>\"torch\"=True</code>.</li>\n<li><code>np_random</code> - The random number generator for the environment. This is automatically assigned during\n<code>super().reset(seed=seed)</code> and when assessing <code>np_random</code>.</li>\n</ul>\n\n<p><em>seealso For modifying or extending environments use the <code>gymnasium.Wrapper</code> class.</em></p>\n\n<p>Note:\n    To get reproducible sampling of actions, a seed can be set with <code>env.action_space.seed(123)</code>.</p>\n\n<p>Note:\n    For strict type checking (e.g. mypy or pyright), <code>Env</code> is a generic class with two parameterized types: <code>ObsType</code> and <code>ActType</code>.\n    The <code>ObsType</code> and <code>ActType</code> are the expected types of the observations and actions used in <code>reset()</code> and <code>step()</code>.\n    The environment's <code>observation_space</code> and <code>action_space</code> should have type <code>Space[ObsType]</code> and <code>Space[ActType]</code>,\n    see a space's implementation to find its parameterized type.</p>\n", "bases": "typing.Generic[~ObsType, ~ActType]"}, {"fullname": "CARLA.env.world_env.World.__init__", "modulename": "CARLA.env.world_env", "qualname": "World.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">carla_world</span>, </span><span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">client</span></span>)</span>"}, {"fullname": "CARLA.env.world_env.World.episode", "modulename": "CARLA.env.world_env", "qualname": "World.episode", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.collision_number", "modulename": "CARLA.env.world_env", "qualname": "World.collision_number", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.observation_space", "modulename": "CARLA.env.world_env", "qualname": "World.observation_space", "kind": "variable", "doc": "<p></p>\n", "annotation": ": gymnasium.spaces.space.Space[~ObsType]"}, {"fullname": "CARLA.env.world_env.World.action_space", "modulename": "CARLA.env.world_env", "qualname": "World.action_space", "kind": "variable", "doc": "<p></p>\n", "annotation": ": gymnasium.spaces.space.Space[~ActType]"}, {"fullname": "CARLA.env.world_env.World.world", "modulename": "CARLA.env.world_env", "qualname": "World.world", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.client", "modulename": "CARLA.env.world_env", "qualname": "World.client", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.done", "modulename": "CARLA.env.world_env", "qualname": "World.done", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.sync", "modulename": "CARLA.env.world_env", "qualname": "World.sync", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.actor_role_name", "modulename": "CARLA.env.world_env", "qualname": "World.actor_role_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.player", "modulename": "CARLA.env.world_env", "qualname": "World.player", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.follower", "modulename": "CARLA.env.world_env", "qualname": "World.follower", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.follower_camera", "modulename": "CARLA.env.world_env", "qualname": "World.follower_camera", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.depth_camera", "modulename": "CARLA.env.world_env", "qualname": "World.depth_camera", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.npc1", "modulename": "CARLA.env.world_env", "qualname": "World.npc1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.follower_lidar", "modulename": "CARLA.env.world_env", "qualname": "World.follower_lidar", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.lidar_data", "modulename": "CARLA.env.world_env", "qualname": "World.lidar_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.lidar_sensor", "modulename": "CARLA.env.world_env", "qualname": "World.lidar_sensor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.actors", "modulename": "CARLA.env.world_env", "qualname": "World.actors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.vehicles", "modulename": "CARLA.env.world_env", "qualname": "World.vehicles", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.pedestrians", "modulename": "CARLA.env.world_env", "qualname": "World.pedestrians", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.yolo_model", "modulename": "CARLA.env.world_env", "qualname": "World.yolo_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.collision_sensor", "modulename": "CARLA.env.world_env", "qualname": "World.collision_sensor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.lane_invasion_sensor", "modulename": "CARLA.env.world_env", "qualname": "World.lane_invasion_sensor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.gnss_sensor", "modulename": "CARLA.env.world_env", "qualname": "World.gnss_sensor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.imu_sensor", "modulename": "CARLA.env.world_env", "qualname": "World.imu_sensor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.radar_sensor", "modulename": "CARLA.env.world_env", "qualname": "World.radar_sensor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.camera_manager", "modulename": "CARLA.env.world_env", "qualname": "World.camera_manager", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.log_file", "modulename": "CARLA.env.world_env", "qualname": "World.log_file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.recording_enabled", "modulename": "CARLA.env.world_env", "qualname": "World.recording_enabled", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.recording_start", "modulename": "CARLA.env.world_env", "qualname": "World.recording_start", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.constant_velocity_enabled", "modulename": "CARLA.env.world_env", "qualname": "World.constant_velocity_enabled", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.show_vehicle_telemetry", "modulename": "CARLA.env.world_env", "qualname": "World.show_vehicle_telemetry", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.doors_are_open", "modulename": "CARLA.env.world_env", "qualname": "World.doors_are_open", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.current_map_layer", "modulename": "CARLA.env.world_env", "qualname": "World.current_map_layer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.map_layer_names", "modulename": "CARLA.env.world_env", "qualname": "World.map_layer_names", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.frame_counter", "modulename": "CARLA.env.world_env", "qualname": "World.frame_counter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.env.world_env.World.reset", "modulename": "CARLA.env.world_env", "qualname": "World.reset", "kind": "function", "doc": "<p>Reset the CARLA environment and returns the initial observation.\nRespawns necessary components</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">options</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.env.world_env.World.get_transformed_lidar_points", "modulename": "CARLA.env.world_env", "qualname": "World.get_transformed_lidar_points", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lidar_data</span>, </span><span class=\"param\"><span class=\"n\">location</span>, </span><span class=\"param\"><span class=\"n\">rotation</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.env.world_env.World.merge_clusters", "modulename": "CARLA.env.world_env", "qualname": "World.merge_clusters", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">clustered_objects</span>, </span><span class=\"param\"><span class=\"n\">merge_distance</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.env.world_env.World.cluster_points", "modulename": "CARLA.env.world_env", "qualname": "World.cluster_points", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">points_2d</span>,</span><span class=\"param\">\t<span class=\"n\">follower_rotation_new</span>,</span><span class=\"param\">\t<span class=\"n\">follower_location_new</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">0.7</span>,</span><span class=\"param\">\t<span class=\"n\">min_samples</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.env.world_env.World.to_image_coords", "modulename": "CARLA.env.world_env", "qualname": "World.to_image_coords", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.env.world_env.World.visualize", "modulename": "CARLA.env.world_env", "qualname": "World.visualize", "kind": "function", "doc": "<p>Used for visualizing 2D tracks through clustering</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tracked_objects</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.env.world_env.World.override_rl", "modulename": "CARLA.env.world_env", "qualname": "World.override_rl", "kind": "function", "doc": "<p>Used for overriding reinforcement learning agent after collision prediction</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lidar_sectors</span>, </span><span class=\"param\"><span class=\"n\">rl_action</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.env.world_env.World.get_state", "modulename": "CARLA.env.world_env", "qualname": "World.get_state", "kind": "function", "doc": "<p>Updates state information per time step</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.env.world_env.World.calculate_goal_position", "modulename": "CARLA.env.world_env", "qualname": "World.calculate_goal_position", "kind": "function", "doc": "<p>Calculate the goal position 15 meters ahead of the player vehicle in the same orientation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">player_location</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.env.world_env.World.step", "modulename": "CARLA.env.world_env", "qualname": "World.step", "kind": "function", "doc": "<p>Applies the agent's action: acceleration, steering, and braking.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">action</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.env.world_env.World.compute_reward", "modulename": "CARLA.env.world_env", "qualname": "World.compute_reward", "kind": "function", "doc": "<p>Computes the reward based on the state information</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.env.world_env.World.check_collision", "modulename": "CARLA.env.world_env", "qualname": "World.check_collision", "kind": "function", "doc": "<p>Check if the follower vehicle has collided with another actor.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.env.world_env.World.modify_vehicle_physics", "modulename": "CARLA.env.world_env", "qualname": "World.modify_vehicle_physics", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">actor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.env.world_env.World.destroy_sensors", "modulename": "CARLA.env.world_env", "qualname": "World.destroy_sensors", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.env.world_env.World.destroy", "modulename": "CARLA.env.world_env", "qualname": "World.destroy", "kind": "function", "doc": "<p>Dsteroys spawned actors at the end of an episode</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.main", "modulename": "CARLA.main", "kind": "module", "doc": "<h2 id=\"mainpy\">main.py</h2>\n\n<p>Entry point for running the autonomous overtaking simulation in CARLA.</p>\n\n<p>This script initializes the simulation environment, sets up the agent,\nand handles the episode loop for running either training or evaluation,\ndepending on the configuration.</p>\n\n<p>Typical usage:\n    python main.py --train      # to start training\n    python main.py --test       # to run evaluation</p>\n\n<p>Modules:\n    - Initializes CARLA environment, sensors, and world settings.\n    - Interfaces with the PPO agent.\n    - Logs performance metrics and visualizes simulation.</p>\n"}, {"fullname": "CARLA.main.main", "modulename": "CARLA.main", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.test", "modulename": "CARLA.test", "kind": "module", "doc": "<h2 id=\"testpy\">test.py</h2>\n\n<p>Evaluation script for a trained PPO agent.</p>\n\n<p>This script runs the agent in the CARLA simulation without exploration noise.\nIt loads a saved model checkpoint and evaluates the agent's performance across\na fixed number of episodes.</p>\n\n<p>Functions:\n    - test(): Main evaluation loop.\n    - visualize_episode(): Optional rendering or output saving for analysis.</p>\n\n<p>Typical usage:\n    python test.py --checkpoint path/to/model.pt</p>\n"}, {"fullname": "CARLA.test.game_loop_test", "modulename": "CARLA.test", "qualname": "game_loop_test", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CARLA.train", "modulename": "CARLA.train", "kind": "module", "doc": "<h2 id=\"trainpy\">train.py</h2>\n\n<p>Training module for the reinforcement learning agent.</p>\n\n<p>This script contains the training loop for the PPO agent. It interacts with\nthe CARLA environment, collects experience data, computes rewards, and updates\nthe agent's policy network.</p>\n\n<p>Functions:\n    - train(): Main training function.\n    - save_model(): Utility to save trained agent weights.\n    - log_metrics(): Logs reward, collision rates, and other metrics.</p>\n\n<p>Requirements:\n    - PPO agent implementation\n    - A registered custom CARLA environment</p>\n"}, {"fullname": "CARLA.train.model_path", "modulename": "CARLA.train", "qualname": "model_path", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;ppo_trained_model44&#x27;"}, {"fullname": "CARLA.train.SaveEveryNStepsCallback", "modulename": "CARLA.train", "qualname": "SaveEveryNStepsCallback", "kind": "class", "doc": "<p>Base class for callback.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>verbose: Verbosity level</strong>:  0 for no output, 1 for info messages, 2 for debug messages</li>\n</ul>\n", "bases": "stable_baselines3.common.callbacks.BaseCallback"}, {"fullname": "CARLA.train.SaveEveryNStepsCallback.__init__", "modulename": "CARLA.train", "qualname": "SaveEveryNStepsCallback.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">save_freq</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">save_pathh</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ppo_model_latest&#39;</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span></span>)</span>"}, {"fullname": "CARLA.train.SaveEveryNStepsCallback.save_freq", "modulename": "CARLA.train", "qualname": "SaveEveryNStepsCallback.save_freq", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.train.SaveEveryNStepsCallback.save_path_prefix", "modulename": "CARLA.train", "qualname": "SaveEveryNStepsCallback.save_path_prefix", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.train.SaveEveryNStepsCallback.last_saved_step", "modulename": "CARLA.train", "qualname": "SaveEveryNStepsCallback.last_saved_step", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.train.SaveEveryNStepsCallback.number_of_steps", "modulename": "CARLA.train", "qualname": "SaveEveryNStepsCallback.number_of_steps", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "CARLA.train.game_lllloop", "modulename": "CARLA.train", "qualname": "game_lllloop", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "QCar", "modulename": "QCar", "kind": "module", "doc": "<p></p>\n"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();